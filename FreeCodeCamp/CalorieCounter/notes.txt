Split
{
    The split() method splits a string into an array of substrings, and returns the new array. You can pass in an optional separator which tells the method where each split should happen.

    For example, passing an empty string into the split method will split the string into an array of individual characters.

    const str = 'Hello World';
    const strArray = str.split('');
    // ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d"]
}
Includes
{
    The .includes() method returns true if the array contains the character, and false if not. The logical NOT operator (!) will return the opposite of the value of the .includes() method.

    Here is an example:

    const numbersArray = [1, 2, 3, 4, 5]
    const number = 6

    if (!numbersArray.includes(number)) {
    console.log("The number is not in the array.")
    }
}

Regex
{
Note that you need to use the \ to escape the +, because a + has a special meaning in regular expressions.

In regex, shorthand character classes allow you to match specific characters without having to write those characters in your pattern. 
Shorthand character classes are preceded with a backslash (\). The character class \s will match any whitespace character. Add this to your regex pattern.

To tell the pattern to match each of these characters individually, you need to turn them into a character class. 
This is done by wrapping the characters you want to match in brackets. For example, this pattern will match the characters h, e, l, or o:
const regex = /[helo]/;
Turn your +-\s pattern into a character class. Note that you no longer need to escape the + character, because you are using a character class.

Regex can also take specific flags to alter the pattern matching behavior.
 Flags are added after the closing /. The g flag, which stands for "global", will tell the pattern to continue looking after it has found a match. Here is an example:
const helloRegex = /hello/g;

Strings have a .replace() method which allows you to replace characters in the string with another string. .replace takes two arguments. 
The first is the character sequence to replace – this can either be a string or a regex pattern. The second is the string to replace that sequence with. 
For example, this would replace all instances of l with 1:

"hello".replace(/l/g, "1");

The e in a number input can also be an uppercase E. Regex has a flag for this, however – the i flag, which stands for "insensitive". 
This flag makes your pattern case-insensitive. Add the i flag to your regex pattern.

The + modifier in a regex allows you to match a pattern that occurs one or more times. 
To match your digit pattern one or more times, add a plus after each of the digit character classes. For example: [0-9]+.
}