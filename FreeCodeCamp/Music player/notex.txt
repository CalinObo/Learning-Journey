{
    The spread operator (...) allows you to copy all elements from one array into another. 
    It can also be used to concatenate multiple arrays into one. In the example below, both arr1 and arr2 have been spread into combinedArr:
    const arr1 = [1, 2, 3];
    const arr2 = [4, 5, 6];

    const combinedArr = [...arr1, ...arr2];
    console.log(combinedArr); // Output: [1, 2, 3, 4, 5, 6]
}
{
    An arrow function is a shorter and more concise way to write functions in JavaScript. It's a function expression, which is a function that's assigned to a variable. To write an arrow function, you can use the following syntax:

    // Traditional function
    function add(a, b) {
    return a + b;
    }
    console.log(add(3, 5)); // Output: 8

    // Arrow function
    const addArrow = (a, b) => {
    return a + b;
    };
    console.log(addArrow(3, 5)); // Output: 8
    If the function body consists of a single expression, you don't need the curly braces and the return keyword. This is called an implicit return:

    const addArrow = (a, b) =>  a + b;
    console.log(addArrow(3, 5)); // Output: 8
}
{
    The map() method is used to iterate through an array and return a new array. It's helpful when you want to create a new array based on the values of an existing array. For example:

    const numbers = [1, 2, 3];
    const doubledNumbers = numbers.map((number) => number * 2); // doubledNumbers will be [2, 4, 6]
    Notice that the map() method takes a function as an argument. This is called a callback function, which is a function that is passed to another function as an argument. In the example above, the callback function is (number) => number * 2, and it's run on each element in the numbers array. The map() method then returns a new array with the results.

    Pass in a callback function to the map() method. The callback function should take song as a parameter, use the arrow function syntax, and have an empty body.
}
{
    The join() method is used to concatenate all the elements of an array into a single string. It takes an optional parameter called separator which is used to separate each element of the array. For example:

    const exampleArr = ["This", "is", "a", "sentence"];
    const sentence = exampleArray.join(" "); // Separator takes a space character
    console.log(sentence); // Output: "This is a sentence"
}
{
    Optional chaining (?.) helps prevent errors when accessing nested properties that might be null or undefined. For example:

    const user = {
    name: "Quincy",
    address: {
        city: "San Francisco",
        state: "CA",
        country: "USA",
    },
    };

    // Accessing nested properties without optional chaining
    const state = user.address.state; // CA

    // Accessing a non-existent nested property with optional chaining
    const zipCode = user.address?.zipCode; // Returns undefined instead of throwing an error

}
{
    The sort() method converts elements of an array into strings and sorts them in place based on their values in the UTF-16 encoding.

    const names = ["Tom", "Jessica", "Quincy", "Naomi"];
    names.sort() // ["Jessica", "Naomi", "Quincy", "Tom"]
}

{
    To sort the songs in alphabetical order by title, you will need to pass in a compare callback function into your sort() method.

    Here is an example of sorting a list of fruits by name.

    const fruits = [
    { name: "Apples", price: 0.99 },
    { name: "Blueberries", price: 1.49 },
    { name: "Grapes", price: 2.99 },
    ];

    fruits.sort((a, b) => {
    if (a.name < b.name) {
        return -1;
    }

    if (a.name > b.name) {
        return 1;
    }

    return 0;
    });
}

{
    The sort() method accepts a compare callback function that defines the sort order.

    In this example, the first condition (a.name < b.name) checks if the name of the first fruit is less than the name of the second fruit. If so, the first fruit is sorted before the second fruit.

    Strings are compared lexicographically which means they are compared character by character. For example, "Apples" is less than "Bananas" because "A" comes before "B" in the alphabet.

    The reason why this example is returning numbers is because the sort() method is expecting a number to be returned. If you return a negative number, the first item is sorted before the second item.

    const fruits = [
    { name: "Apples", price: 0.99 },
    { name: "Blueberries", price: 1.49 },
    { name: "Grapes", price: 2.99 },
    ];

    fruits.sort((a, b) => {
    if (a.name < b.name) {
        return -1;
    }

    if (a.name > b.name) {
        return 1;
    }

    return 0;
    });
}
{
    The find() method retrieves the first element within an array that fulfills the conditions specified in the provided callback function. If no element satisfies the condition, the method returns undefined.

    In the example below, the find() method is used to find the first number greater than 25:

    const numbers = [10, 20, 30, 40, 50];

    // Find the first number greater than 25
    const foundNumber = numbers.find((number) => number > 25);
    console.log(foundNumber); // Output: 30
}

{
    The indexOf() array method returns the first index at which a given element can be found in the array, or -1 if the element is not present.

    const animals = ["dog", "cat", "horse"];
    animals.indexOf("cat") // 1
}

{
    The forEach method is used to loop through an array and perform a function on each element of the array. For example, suppose you have an array of numbers and you want to log each number to the console.

    const numbers = [1, 2, 3, 4, 5];

    // Using forEach to iterate through the array
    numbers.forEach((number) => {
    console.log(number); // 1, 2, 3, 4, 5
    });
    Use the forEach method on playlistSongElements. Pass in songEl as the parameter and use arrow syntax to add in an empty callback.
}

{
    textContent sets the text of a node and allows you to set or retrieve the text content of an HTML element.

    <div id="example">This is some text content</div>
    const element = document.getElementById('example');
    console.log(element.textContent); // Output: This is some text content

}

{
    The filter method keeps only the elements of an array that satisfy the callback function passed to it:

    const numArr = [1, 10, 8, 3, 4, 5]
    const numsGreaterThanThree = numArr.filter((num) => num > 3);

    console.log(numsGreaterThanThree) // Output: [10, 8, 4, 5]

}

{
    createElement() is a DOM method you can use to dynamically create an element using JavaScript. To use createElement(), you call it, then pass in the tag name as a string:

    // syntax
    document.createElement(tagName)

    // example
    document.createElement('div')
    You can also assign it to a variable:

    const divElement = document.createElement('div')
}

{
    The createTextNode() method is used to create a text node. To use it, you call it and pass in the text as a string:

    document.createTextNode("your text")
    You can also assign it to a variable:

    const myText = document.createTextNode("your text")
}

{
    appendChild() lets you add a node or an element as the child of another element. In the example below, the text "Click me" would be attached to the button:

    const parentElement = document.createElement("button")
    const parentElementText = document.createTextNode("Click me")

    // attach the text "Click me" to the button
    parentElement.appendChild(parentElementText)
}