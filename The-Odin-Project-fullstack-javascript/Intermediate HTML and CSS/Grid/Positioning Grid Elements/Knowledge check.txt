Explain the difference between a track and a line.

We learned that when we define a grid using grid-template, we are defining the tracks the grid will have.
We can think of a grid track as any single row or column on a grid.
To give an example, if we wanted to create a 3x3 grid with 100 pixel rows and 100 pixel columns, we need
to define 3 horizontal tracks with a height of 100 pixels, and 3 vertical tracks with a width of 100pixels.

Whenever we create grid tracks, grid lines are created implicitly. This is important. Grid line are only created after our grid tracks have been defined. 
We can not explicitly create grid lines. Every track has a start line and an end line. The lines are numbered from left to right
and top to bottom starting at 1. So our 3x3 grid above has vertical lines for columns ranging from 1 to 4 and horizontal lines
for rows ranging from 1 to 4. Grid lines are what we use to position grid items.

What is the smallest unit on a grid?

The space in a grid shared by a single row track and a single column track is called a grid cell. You can think of a grid
cell like a cell in a spreadsheet: a space defined by a row, column coordinate.

What kind of value do we give to the grid-column-start or grid-column-end properties?
grid-column start takes as a value either:
- a number such as 2 and it starts from the second grid line
- a name to refer to a named grid line
- span number, the item will span a certain (number) amount of grid tracks 
-span <name> - the item will span across until it hits the next line with the provided name
-auto - indicates auto-placement, an automatic span, or a default span of one 

Which property can we use to combine all the start and end values for a grid item?

We can use grid area =>
#living-room{
    grid-area: 1/1/3/6;
}
1 starts on row 1
1 starts on column 1
3 end on row 3
6 ends on column 6

Which grid container propertt can map out a visual structure of grid items?

We can make use of grid-template-areas.
